{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","data","console","log","options","responsive","height","width","App","useState","latest","setLatest","results","setResult","srilanka","setSriLanka","searchCountry","setSearchCountry","chart","setChart","useEffect","getData","axios","all","get","then","responseArr","catch","err","a","res","labels","Object","keys","timeline","cases","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","values","response","lastUpdatedGlobal","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","border","style","borderRadius","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","deaths","recovered","todayCases","todayDeaths","active","critical","className","textAlign","update_date_time","Container","color","CardDeck","bg","local_total_cases","local_new_cases","local_active_cases","local_deaths","local_new_deaths","local_recovered","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6QAUeA,EAPD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAIf,OAFAC,QAAQC,IAAIF,GAEL,kBAAC,IAAD,CAAMA,KAAMA,EAAMG,QAAS,CAAEC,YAAY,EAAMC,OAAQ,QAASC,MAAO,YCmQjEC,MA9Pf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEgBF,mBAAS,IAFzB,mBAENG,EAFM,KAEGC,EAFH,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAI6BN,mBAAS,IAJtC,mBAINO,EAJM,KAISC,EAJT,OAKaR,mBAAS,IALtB,mBAKNS,EALM,KAKCC,EALD,KAObC,qBAAU,WACRC,IACAC,IACGC,IAAI,CACHD,IAAME,IAAI,oCACVF,IAAME,IAAI,0CACVF,IAAME,IAAI,2DAEXC,MAAK,SAAAC,GACJf,EAAUe,EAAY,GAAGzB,MACzBY,EAAUa,EAAY,GAAGzB,MACzBc,EAAYW,EAAY,GAAGzB,KAAKA,SAEjC0B,OAAM,SAAAC,GACL1B,QAAQC,IAAIyB,QAEb,IAEH,IAAMP,EAAO,uCAAG,4BAAAQ,EAAA,+EAEMP,IAAME,IAAN,qDAFN,OAENM,EAFM,OAMZX,EAAS,CACPY,OAAQC,OAAOC,KAAKH,EAAI7B,KAAKiC,SAASC,OACtCC,SAAU,CACR,CACEC,MAAO,iBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,mBACjBC,YAAa,mBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,kBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,kBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBrD,KAAM+B,OAAOuB,OAAOzB,EAAI7B,KAAKiC,SAASC,WA5BhC,gDAiCZjC,QAAQC,IAAI,KAAMqD,UAjCN,yDAAH,qDAsCPC,EADO,IAAIC,KAAKC,SAASjD,EAAOkD,UACPC,WAMzBC,EAJgBlD,EAAQmD,QAAO,SAAAC,GACnC,MAAyB,KAAlBhD,EAAuBgD,EAAKC,QAAQC,SAASlD,GAAiBgD,KAGvCG,KAAI,SAAClE,EAAMmE,GACzC,OAEE,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAGG,OAAO,UAAUC,MAAO,CAAEC,aAAc,IAAKC,OAAQ,SACjE,kBAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAK5E,EAAK6E,YAAYC,KAAMP,MAAO,CAAElE,OAAQ,WACrE,kBAAC+D,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,KAAahF,EAAKgE,SAClB,kBAACI,EAAA,EAAKa,KAAN,gBAAoBjF,EAAKkC,OACzB,kBAACkC,EAAA,EAAKa,KAAN,iBAAqBjF,EAAKkF,QAC1B,kBAACd,EAAA,EAAKa,KAAN,oBAAwBjF,EAAKmF,WAC7B,kBAACf,EAAA,EAAKa,KAAN,wBAA4BjF,EAAKoF,YACjC,kBAAChB,EAAA,EAAKa,KAAN,yBAA6BjF,EAAKqF,aAClC,kBAACjB,EAAA,EAAKa,KAAN,iBAAqBjF,EAAKsF,QAC1B,kBAAClB,EAAA,EAAKa,KAAN,mBAAuBjF,EAAKuF,eActC,OACE,yBAAKC,UAAU,cAAcjB,MAAO,CAAEE,OAAQ,OAAQlC,gBAAiB,YACrE,6BACA,wBAAIgC,MAAO,CAAEkB,UAAW,WAAxB,wBACA,6BACA,6BAEA,4CACA,wBAAIlB,MAAO,CAAEkB,UAAW,WAAxB,UAA2C,kBAAC,IAAD,KAAS5E,EAAS6E,mBAC7D,6BAEA,kBAACC,EAAA,EAAD,CAAWpB,MAAO,CAACqB,MAAO,UACxB,kBAACC,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,CAAM0B,GAAG,OAAOvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACrD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,oBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGpE,EAASkF,qBAIhB,kBAAC3B,EAAA,EAAD,CAAM0B,GAAG,YAAYvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MAC1D,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,sBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGpE,EAASmF,mBAIhB,kBAAC5B,EAAA,EAAD,CAAM0B,GAAG,UAAUvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACxD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,qBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGpE,EAASoF,uBAKlB,6BACA,kBAACJ,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,CAAM0B,GAAG,SAASvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACvD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,qBACA,kBAACZ,EAAA,EAAKa,KAAN,KACCpE,EAASqF,gBAId,kBAAC9B,EAAA,EAAD,CAAM0B,GAAG,UAAUvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACxD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,uBACA,kBAACZ,EAAA,EAAKa,KAAN,KACCpE,EAASsF,oBAId,kBAAC/B,EAAA,EAAD,CAAM0B,GAAG,UAAUvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACxD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,kBACA,kBAACZ,EAAA,EAAKa,KAAN,KACCpE,EAASuF,qBAOlB,6BACA,6BAEA,6CACA,wBAAI7B,MAAO,CAAEkB,UAAW,WAAxB,kBAAmD,kBAAC,IAAD,KAASjC,IAC5D,6BACA,kBAACmC,EAAA,EAAD,CAAWpB,MAAO,CAACqB,MAAO,UACxB,kBAACC,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,CAAM0B,GAAG,OAAOvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACrD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,oBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGxE,EAAOyB,SAId,kBAACkC,EAAA,EAAD,CAAM0B,GAAG,YAAYvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MAC1D,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,sBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGxE,EAAO2E,cAId,kBAAChB,EAAA,EAAD,CAAM0B,GAAG,UAAUvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACxD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,qBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGxE,EAAO6E,WAKhB,6BACA,kBAACO,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,CAAM0B,GAAG,SAASvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACvD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,qBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGxE,EAAOyE,UAId,kBAACd,EAAA,EAAD,CAAM0B,GAAG,UAAUvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACxD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,uBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGxE,EAAO4E,eAId,kBAACjB,EAAA,EAAD,CAAM0B,GAAG,UAAUvB,MAAO,CAAEjE,MAAO,QAASkE,aAAc,MACxD,kBAACJ,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,kBACA,kBAACZ,EAAA,EAAKa,KAAN,KACGxE,EAAO0E,eAMlB,6BACA,6BAEA,kBAACQ,EAAA,EAAD,KACE,+DACA,kBAAC,EAAD,CAAO3F,KAAMiB,KAGf,6BACA,6BAEA,kBAAC0E,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAM9B,MAAO,CAACE,OAAQ,SACpB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,YAAY,oBACZC,SAAU,SAAAC,GAAC,OAAI5F,EAAiB4F,EAAEC,OAAOC,YAI/C,kBAAC,IAAD,CAASC,QA7JC,CAAC,CACbC,QAAS,EACTC,MAAO,oBACN,CACDD,QAAS,EACTC,MAAO,uBAyJFpD,MCtPSqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtG,MAAK,SAAAuG,GACJA,EAAaC,gBAEdtG,OAAM,SAAAuG,GACLhI,QAAQgI,MAAMA,EAAMC,a","file":"static/js/main.34e9235e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst Chart = ({ data }) => {\n  \n  console.log(data);\n\n  return <Line data={data} options={{ responsive: true, height: '600px', width: \"600px\" }} />;\n};\n\nexport default Chart;","import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport axios from 'axios'\nimport Columns from 'react-columns'\nimport Form from 'react-bootstrap/Form'\nimport Moment from 'react-moment'\nimport { Container } from 'react-bootstrap'\nimport Chart from \"./Chart\";\n\n// getting data from the API usnig axios with useEffect\nfunction App() {\n  const [latest, setLatest] = useState([])\n  const [results, setResult] = useState([])\n  const [srilanka, setSriLanka] = useState([])\n  const [searchCountry, setSearchCountry] = useState(\"\")\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    getData();\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n        axios.get(\"https://hpb.health.gov.lk/api/get-current-statistical\")\n      ])\n      .then(responseArr => {\n        setLatest(responseArr[0].data) // onSuccess\n        setResult(responseArr[1].data)\n        setSriLanka(responseArr[2].data.data)\n      })\n      .catch(err => {\n        console.log(err) // onError\n      })\n    }, []);\n\n    const getData = async () => {\n      try {\n        const res = await axios.get(\n          `https://corona.lmao.ninja/v2/historical/sri lanka`\n        );\n  \n        setChart({\n          labels: Object.keys(res.data.timeline.cases),\n          datasets: [\n            {\n              label: \"Covid-19 Cases\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(0, 0, 0, 1)\",\n              borderColor: \"rgba(50,50,50,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(170,0,0,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 5,\n              pointHoverRadius: 8,\n              pointHoverBackgroundColor: \"rgba(170,0,0,1)\",\n              pointHoverBorderColor: \"rgba(255,255,255,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: Object.values(res.data.timeline.cases)\n            }\n          ]\n        });\n      } catch (error) {\n        console.log(error.response);\n      }\n    };\n\n    const date = new Date(parseInt(latest.updated))\n    const lastUpdatedGlobal = date.toString()\n\n    const filterCountry = results.filter(item => {\n      return searchCountry !== \"\" ? item.country.includes(searchCountry) : item\n    })\n\n    const countries = filterCountry.map((data, i) => {\n      return (\n\n        <Card key={i} border=\"primary\" style={{ borderRadius: '0', margin: '10px' }}>\n          <Card.Img variant='top' src={data.countryInfo.flag} style={{ height: '130px'}}/>\n          <Card.Body>\n            <Card.Title>{data.country}</Card.Title>\n            <Card.Text>Cases - {data.cases}</Card.Text>\n            <Card.Text>Deaths - {data.deaths}</Card.Text>\n            <Card.Text>Recovered - {data.recovered}</Card.Text>\n            <Card.Text>Today's Cases - {data.todayCases}</Card.Text>\n            <Card.Text>Today's Deaths - {data.todayDeaths}</Card.Text>\n            <Card.Text>Active - {data.active}</Card.Text>\n            <Card.Text>Critical - {data.critical}</Card.Text>\n          </Card.Body>\n        </Card>\n      )\n    })\n\n    var queries = [{\n      columns: 3,\n      query: 'min-width: 500px'\n    }, {\n      columns: 4,\n      query: 'min-width: 1000px'\n    }]\n\n  return (\n    <div className=\"text-center\" style={{ margin: \"10px\", backgroundColor: \"#F0F8FF\"}}>\n      <br />\n      <h1 style={{ textAlign: \"center\" }}>Covid-19 Live Status</h1>\n      <br />\n      <br />\n\n      <h3>Local Status</h3>\n      <h6 style={{ textAlign: \"center\" }}>Last - <Moment>{srilanka.update_date_time}</Moment></h6>\n      <br />\n      \n      <Container style={{color: 'white'}}>\n        <CardDeck>\n          <Card bg=\"dark\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Total Cases</Card.Title>\n              <Card.Text>\n                {srilanka.local_total_cases}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"secondary\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Today's Cases</Card.Title>\n              <Card.Text>\n                {srilanka.local_new_cases}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"primary\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Active Cases</Card.Title>\n              <Card.Text>\n                {srilanka.local_active_cases}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </CardDeck>\n        <br />\n        <CardDeck>\n          <Card bg=\"danger\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Total Deaths</Card.Title>\n              <Card.Text>\n              {srilanka.local_deaths}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"warning\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Today's Deaths</Card.Title>\n              <Card.Text>\n              {srilanka.local_new_deaths}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"success\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Recovered</Card.Title>\n              <Card.Text>\n              {srilanka.local_recovered}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </CardDeck>\n      </Container>\n\n      <br />\n      <br />\n\n      <h3>Global Status</h3>\n      <h6 style={{ textAlign: \"center\" }}>Last Updated - <Moment>{lastUpdatedGlobal}</Moment></h6>\n      <br />\n      <Container style={{color: 'white'}}>\n        <CardDeck>\n          <Card bg=\"dark\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Total Cases</Card.Title>\n              <Card.Text>\n                {latest.cases}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"secondary\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Today's Cases</Card.Title>\n              <Card.Text>\n                {latest.todayCases}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"primary\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Active Cases</Card.Title>\n              <Card.Text>\n                {latest.active}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </CardDeck>\n        <br />\n        <CardDeck>\n          <Card bg=\"danger\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Total Deaths</Card.Title>\n              <Card.Text>\n                {latest.deaths}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"warning\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Today's Deaths</Card.Title>\n              <Card.Text>\n                {latest.todayDeaths}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          <Card bg=\"success\" style={{ width: '18rem', borderRadius: '0' }}>\n            <Card.Body>\n              <Card.Title>Recovered</Card.Title>\n              <Card.Text>\n                {latest.recovered}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </CardDeck>\n      </Container>\n      <br />\n      <br />\n\n      <Container>\n        <h3>Daily Statistics of Local Cases</h3>\n        <Chart data={chart} />\n      </Container>\n      \n      <br />\n      <br />\n\n      <Container>\n        <Form style={{margin: '10px'}}>\n          <Form.Group controlId=\"formGroupSearch\">\n            <Form.Control \n              type=\"text\" \n              placeholder=\"Search by country\" \n              onChange={e => setSearchCountry(e.target.value)} />\n          </Form.Group>\n        </Form>\n\n        <Columns queries={queries}>\n          {countries}\n        </Columns>\n      </Container>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}